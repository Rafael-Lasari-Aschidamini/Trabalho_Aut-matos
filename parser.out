Grammar:

Rule 0     S' -> statement
Rule 1     statement -> ID SUB
Rule 2     statement -> ID ADD
Rule 3     statement -> expr
Rule 4     statement -> ID = expr
Rule 5     expr -> VDD
Rule 6     expr -> FALSO
Rule 7     expr -> ID
Rule 8     expr -> NUMBER
Rule 9     expr -> ( expr )
Rule 10    expr -> - expr  [precedence=right, level=4]
Rule 11    expr -> expr DI expr  [precedence=left, level=1]
Rule 12    expr -> expr IG expr  [precedence=left, level=1]
Rule 13    expr -> expr MOD expr  [precedence=left, level=3]
Rule 14    expr -> expr / expr  [precedence=left, level=3]
Rule 15    expr -> expr * expr  [precedence=left, level=3]
Rule 16    expr -> expr - expr  [precedence=left, level=2]
Rule 17    expr -> expr + expr  [precedence=left, level=2]

Terminals, with rules where they appear:

(                    : 9
)                    : 9
*                    : 15
+                    : 17
-                    : 10 16
/                    : 14
=                    : 4
SUB                  : 1
IG                   : 12
FALSO                : 6
ID                   : 1 2 4 7
ADD                  : 2
MOD                  : 13
DI                   : 11
NUMBER               : 8
VDD                  : 5
error                : 

Nonterminals, with rules where they appear:

expr                 : 3 4 9 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17
statement            : 0


state 0

    (0) S' -> . statement
    (1) statement -> . ID SUB
    (2) statement -> . ID ADD
    (3) statement -> . expr
    (4) statement -> . ID = expr
    (5) expr -> . VDD
    (6) expr -> . FALSO
    (7) expr -> . ID
    (8) expr -> . NUMBER
    (9) expr -> . ( expr )
    (10) expr -> . - expr
    (11) expr -> . expr DI expr
    (12) expr -> . expr IG expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr / expr
    (15) expr -> . expr * expr
    (16) expr -> . expr - expr
    (17) expr -> . expr + expr
    ID              shift and go to state 2
    VDD             shift and go to state 4
    FALSO           shift and go to state 5
    NUMBER          shift and go to state 6
    (               shift and go to state 7
    -               shift and go to state 8

    statement                      shift and go to state 1
    expr                           shift and go to state 3

state 1

    (0) S' -> statement .


state 2

    (1) statement -> ID . SUB
    (2) statement -> ID . ADD
    (4) statement -> ID . = expr
    (7) expr -> ID .
    SUB             shift and go to state 9
    ADD             shift and go to state 10
    =               shift and go to state 11
    DI              reduce using rule 7 (expr -> ID .)
    IG              reduce using rule 7 (expr -> ID .)
    MOD             reduce using rule 7 (expr -> ID .)
    /               reduce using rule 7 (expr -> ID .)
    *               reduce using rule 7 (expr -> ID .)
    -               reduce using rule 7 (expr -> ID .)
    +               reduce using rule 7 (expr -> ID .)
    $end            reduce using rule 7 (expr -> ID .)


state 3

    (3) statement -> expr .
    (11) expr -> expr . DI expr
    (12) expr -> expr . IG expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . / expr
    (15) expr -> expr . * expr
    (16) expr -> expr . - expr
    (17) expr -> expr . + expr
    $end            reduce using rule 3 (statement -> expr .)
    DI              shift and go to state 12
    IG              shift and go to state 13
    MOD             shift and go to state 14
    /               shift and go to state 15
    *               shift and go to state 16
    -               shift and go to state 17
    +               shift and go to state 18


state 4

    (5) expr -> VDD .
    DI              reduce using rule 5 (expr -> VDD .)
    IG              reduce using rule 5 (expr -> VDD .)
    MOD             reduce using rule 5 (expr -> VDD .)
    /               reduce using rule 5 (expr -> VDD .)
    *               reduce using rule 5 (expr -> VDD .)
    -               reduce using rule 5 (expr -> VDD .)
    +               reduce using rule 5 (expr -> VDD .)
    $end            reduce using rule 5 (expr -> VDD .)
    )               reduce using rule 5 (expr -> VDD .)


state 5

    (6) expr -> FALSO .
    DI              reduce using rule 6 (expr -> FALSO .)
    IG              reduce using rule 6 (expr -> FALSO .)
    MOD             reduce using rule 6 (expr -> FALSO .)
    /               reduce using rule 6 (expr -> FALSO .)
    *               reduce using rule 6 (expr -> FALSO .)
    -               reduce using rule 6 (expr -> FALSO .)
    +               reduce using rule 6 (expr -> FALSO .)
    $end            reduce using rule 6 (expr -> FALSO .)
    )               reduce using rule 6 (expr -> FALSO .)


state 6

    (8) expr -> NUMBER .
    DI              reduce using rule 8 (expr -> NUMBER .)
    IG              reduce using rule 8 (expr -> NUMBER .)
    MOD             reduce using rule 8 (expr -> NUMBER .)
    /               reduce using rule 8 (expr -> NUMBER .)
    *               reduce using rule 8 (expr -> NUMBER .)
    -               reduce using rule 8 (expr -> NUMBER .)
    +               reduce using rule 8 (expr -> NUMBER .)
    $end            reduce using rule 8 (expr -> NUMBER .)
    )               reduce using rule 8 (expr -> NUMBER .)


state 7

    (9) expr -> ( . expr )
    (5) expr -> . VDD
    (6) expr -> . FALSO
    (7) expr -> . ID
    (8) expr -> . NUMBER
    (9) expr -> . ( expr )
    (10) expr -> . - expr
    (11) expr -> . expr DI expr
    (12) expr -> . expr IG expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr / expr
    (15) expr -> . expr * expr
    (16) expr -> . expr - expr
    (17) expr -> . expr + expr
    VDD             shift and go to state 4
    FALSO           shift and go to state 5
    ID              shift and go to state 20
    NUMBER          shift and go to state 6
    (               shift and go to state 7
    -               shift and go to state 8

    expr                           shift and go to state 19

state 8

    (10) expr -> - . expr
    (5) expr -> . VDD
    (6) expr -> . FALSO
    (7) expr -> . ID
    (8) expr -> . NUMBER
    (9) expr -> . ( expr )
    (10) expr -> . - expr
    (11) expr -> . expr DI expr
    (12) expr -> . expr IG expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr / expr
    (15) expr -> . expr * expr
    (16) expr -> . expr - expr
    (17) expr -> . expr + expr
    VDD             shift and go to state 4
    FALSO           shift and go to state 5
    ID              shift and go to state 20
    NUMBER          shift and go to state 6
    (               shift and go to state 7
    -               shift and go to state 8

    expr                           shift and go to state 21

state 9

    (1) statement -> ID SUB .
    $end            reduce using rule 1 (statement -> ID SUB .)


state 10

    (2) statement -> ID ADD .
    $end            reduce using rule 2 (statement -> ID ADD .)


state 11

    (4) statement -> ID = . expr
    (5) expr -> . VDD
    (6) expr -> . FALSO
    (7) expr -> . ID
    (8) expr -> . NUMBER
    (9) expr -> . ( expr )
    (10) expr -> . - expr
    (11) expr -> . expr DI expr
    (12) expr -> . expr IG expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr / expr
    (15) expr -> . expr * expr
    (16) expr -> . expr - expr
    (17) expr -> . expr + expr
    VDD             shift and go to state 4
    FALSO           shift and go to state 5
    ID              shift and go to state 20
    NUMBER          shift and go to state 6
    (               shift and go to state 7
    -               shift and go to state 8

    expr                           shift and go to state 22

state 12

    (11) expr -> expr DI . expr
    (5) expr -> . VDD
    (6) expr -> . FALSO
    (7) expr -> . ID
    (8) expr -> . NUMBER
    (9) expr -> . ( expr )
    (10) expr -> . - expr
    (11) expr -> . expr DI expr
    (12) expr -> . expr IG expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr / expr
    (15) expr -> . expr * expr
    (16) expr -> . expr - expr
    (17) expr -> . expr + expr
    VDD             shift and go to state 4
    FALSO           shift and go to state 5
    ID              shift and go to state 20
    NUMBER          shift and go to state 6
    (               shift and go to state 7
    -               shift and go to state 8

    expr                           shift and go to state 23

state 13

    (12) expr -> expr IG . expr
    (5) expr -> . VDD
    (6) expr -> . FALSO
    (7) expr -> . ID
    (8) expr -> . NUMBER
    (9) expr -> . ( expr )
    (10) expr -> . - expr
    (11) expr -> . expr DI expr
    (12) expr -> . expr IG expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr / expr
    (15) expr -> . expr * expr
    (16) expr -> . expr - expr
    (17) expr -> . expr + expr
    VDD             shift and go to state 4
    FALSO           shift and go to state 5
    ID              shift and go to state 20
    NUMBER          shift and go to state 6
    (               shift and go to state 7
    -               shift and go to state 8

    expr                           shift and go to state 24

state 14

    (13) expr -> expr MOD . expr
    (5) expr -> . VDD
    (6) expr -> . FALSO
    (7) expr -> . ID
    (8) expr -> . NUMBER
    (9) expr -> . ( expr )
    (10) expr -> . - expr
    (11) expr -> . expr DI expr
    (12) expr -> . expr IG expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr / expr
    (15) expr -> . expr * expr
    (16) expr -> . expr - expr
    (17) expr -> . expr + expr
    VDD             shift and go to state 4
    FALSO           shift and go to state 5
    ID              shift and go to state 20
    NUMBER          shift and go to state 6
    (               shift and go to state 7
    -               shift and go to state 8

    expr                           shift and go to state 25

state 15

    (14) expr -> expr / . expr
    (5) expr -> . VDD
    (6) expr -> . FALSO
    (7) expr -> . ID
    (8) expr -> . NUMBER
    (9) expr -> . ( expr )
    (10) expr -> . - expr
    (11) expr -> . expr DI expr
    (12) expr -> . expr IG expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr / expr
    (15) expr -> . expr * expr
    (16) expr -> . expr - expr
    (17) expr -> . expr + expr
    VDD             shift and go to state 4
    FALSO           shift and go to state 5
    ID              shift and go to state 20
    NUMBER          shift and go to state 6
    (               shift and go to state 7
    -               shift and go to state 8

    expr                           shift and go to state 26

state 16

    (15) expr -> expr * . expr
    (5) expr -> . VDD
    (6) expr -> . FALSO
    (7) expr -> . ID
    (8) expr -> . NUMBER
    (9) expr -> . ( expr )
    (10) expr -> . - expr
    (11) expr -> . expr DI expr
    (12) expr -> . expr IG expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr / expr
    (15) expr -> . expr * expr
    (16) expr -> . expr - expr
    (17) expr -> . expr + expr
    VDD             shift and go to state 4
    FALSO           shift and go to state 5
    ID              shift and go to state 20
    NUMBER          shift and go to state 6
    (               shift and go to state 7
    -               shift and go to state 8

    expr                           shift and go to state 27

state 17

    (16) expr -> expr - . expr
    (5) expr -> . VDD
    (6) expr -> . FALSO
    (7) expr -> . ID
    (8) expr -> . NUMBER
    (9) expr -> . ( expr )
    (10) expr -> . - expr
    (11) expr -> . expr DI expr
    (12) expr -> . expr IG expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr / expr
    (15) expr -> . expr * expr
    (16) expr -> . expr - expr
    (17) expr -> . expr + expr
    VDD             shift and go to state 4
    FALSO           shift and go to state 5
    ID              shift and go to state 20
    NUMBER          shift and go to state 6
    (               shift and go to state 7
    -               shift and go to state 8

    expr                           shift and go to state 28

state 18

    (17) expr -> expr + . expr
    (5) expr -> . VDD
    (6) expr -> . FALSO
    (7) expr -> . ID
    (8) expr -> . NUMBER
    (9) expr -> . ( expr )
    (10) expr -> . - expr
    (11) expr -> . expr DI expr
    (12) expr -> . expr IG expr
    (13) expr -> . expr MOD expr
    (14) expr -> . expr / expr
    (15) expr -> . expr * expr
    (16) expr -> . expr - expr
    (17) expr -> . expr + expr
    VDD             shift and go to state 4
    FALSO           shift and go to state 5
    ID              shift and go to state 20
    NUMBER          shift and go to state 6
    (               shift and go to state 7
    -               shift and go to state 8

    expr                           shift and go to state 29

state 19

    (9) expr -> ( expr . )
    (11) expr -> expr . DI expr
    (12) expr -> expr . IG expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . / expr
    (15) expr -> expr . * expr
    (16) expr -> expr . - expr
    (17) expr -> expr . + expr
    )               shift and go to state 30
    DI              shift and go to state 12
    IG              shift and go to state 13
    MOD             shift and go to state 14
    /               shift and go to state 15
    *               shift and go to state 16
    -               shift and go to state 17
    +               shift and go to state 18


state 20

    (7) expr -> ID .
    )               reduce using rule 7 (expr -> ID .)
    DI              reduce using rule 7 (expr -> ID .)
    IG              reduce using rule 7 (expr -> ID .)
    MOD             reduce using rule 7 (expr -> ID .)
    /               reduce using rule 7 (expr -> ID .)
    *               reduce using rule 7 (expr -> ID .)
    -               reduce using rule 7 (expr -> ID .)
    +               reduce using rule 7 (expr -> ID .)
    $end            reduce using rule 7 (expr -> ID .)


state 21

    (10) expr -> - expr .
    (11) expr -> expr . DI expr
    (12) expr -> expr . IG expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . / expr
    (15) expr -> expr . * expr
    (16) expr -> expr . - expr
    (17) expr -> expr . + expr
    DI              reduce using rule 10 (expr -> - expr .)
    IG              reduce using rule 10 (expr -> - expr .)
    MOD             reduce using rule 10 (expr -> - expr .)
    /               reduce using rule 10 (expr -> - expr .)
    *               reduce using rule 10 (expr -> - expr .)
    -               reduce using rule 10 (expr -> - expr .)
    +               reduce using rule 10 (expr -> - expr .)
    $end            reduce using rule 10 (expr -> - expr .)
    )               reduce using rule 10 (expr -> - expr .)


state 22

    (4) statement -> ID = expr .
    (11) expr -> expr . DI expr
    (12) expr -> expr . IG expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . / expr
    (15) expr -> expr . * expr
    (16) expr -> expr . - expr
    (17) expr -> expr . + expr
    $end            reduce using rule 4 (statement -> ID = expr .)
    DI              shift and go to state 12
    IG              shift and go to state 13
    MOD             shift and go to state 14
    /               shift and go to state 15
    *               shift and go to state 16
    -               shift and go to state 17
    +               shift and go to state 18


state 23

    (11) expr -> expr DI expr .
    (11) expr -> expr . DI expr
    (12) expr -> expr . IG expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . / expr
    (15) expr -> expr . * expr
    (16) expr -> expr . - expr
    (17) expr -> expr . + expr
    DI              reduce using rule 11 (expr -> expr DI expr .)
    IG              reduce using rule 11 (expr -> expr DI expr .)
    $end            reduce using rule 11 (expr -> expr DI expr .)
    )               reduce using rule 11 (expr -> expr DI expr .)
    MOD             shift and go to state 14
    /               shift and go to state 15
    *               shift and go to state 16
    -               shift and go to state 17
    +               shift and go to state 18


state 24

    (12) expr -> expr IG expr .
    (11) expr -> expr . DI expr
    (12) expr -> expr . IG expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . / expr
    (15) expr -> expr . * expr
    (16) expr -> expr . - expr
    (17) expr -> expr . + expr
    DI              reduce using rule 12 (expr -> expr IG expr .)
    IG              reduce using rule 12 (expr -> expr IG expr .)
    $end            reduce using rule 12 (expr -> expr IG expr .)
    )               reduce using rule 12 (expr -> expr IG expr .)
    MOD             shift and go to state 14
    /               shift and go to state 15
    *               shift and go to state 16
    -               shift and go to state 17
    +               shift and go to state 18


state 25

    (13) expr -> expr MOD expr .
    (11) expr -> expr . DI expr
    (12) expr -> expr . IG expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . / expr
    (15) expr -> expr . * expr
    (16) expr -> expr . - expr
    (17) expr -> expr . + expr
    DI              reduce using rule 13 (expr -> expr MOD expr .)
    IG              reduce using rule 13 (expr -> expr MOD expr .)
    MOD             reduce using rule 13 (expr -> expr MOD expr .)
    /               reduce using rule 13 (expr -> expr MOD expr .)
    *               reduce using rule 13 (expr -> expr MOD expr .)
    -               reduce using rule 13 (expr -> expr MOD expr .)
    +               reduce using rule 13 (expr -> expr MOD expr .)
    $end            reduce using rule 13 (expr -> expr MOD expr .)
    )               reduce using rule 13 (expr -> expr MOD expr .)


state 26

    (14) expr -> expr / expr .
    (11) expr -> expr . DI expr
    (12) expr -> expr . IG expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . / expr
    (15) expr -> expr . * expr
    (16) expr -> expr . - expr
    (17) expr -> expr . + expr
    DI              reduce using rule 14 (expr -> expr / expr .)
    IG              reduce using rule 14 (expr -> expr / expr .)
    MOD             reduce using rule 14 (expr -> expr / expr .)
    /               reduce using rule 14 (expr -> expr / expr .)
    *               reduce using rule 14 (expr -> expr / expr .)
    -               reduce using rule 14 (expr -> expr / expr .)
    +               reduce using rule 14 (expr -> expr / expr .)
    $end            reduce using rule 14 (expr -> expr / expr .)
    )               reduce using rule 14 (expr -> expr / expr .)


state 27

    (15) expr -> expr * expr .
    (11) expr -> expr . DI expr
    (12) expr -> expr . IG expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . / expr
    (15) expr -> expr . * expr
    (16) expr -> expr . - expr
    (17) expr -> expr . + expr
    DI              reduce using rule 15 (expr -> expr * expr .)
    IG              reduce using rule 15 (expr -> expr * expr .)
    MOD             reduce using rule 15 (expr -> expr * expr .)
    /               reduce using rule 15 (expr -> expr * expr .)
    *               reduce using rule 15 (expr -> expr * expr .)
    -               reduce using rule 15 (expr -> expr * expr .)
    +               reduce using rule 15 (expr -> expr * expr .)
    $end            reduce using rule 15 (expr -> expr * expr .)
    )               reduce using rule 15 (expr -> expr * expr .)


state 28

    (16) expr -> expr - expr .
    (11) expr -> expr . DI expr
    (12) expr -> expr . IG expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . / expr
    (15) expr -> expr . * expr
    (16) expr -> expr . - expr
    (17) expr -> expr . + expr
    DI              reduce using rule 16 (expr -> expr - expr .)
    IG              reduce using rule 16 (expr -> expr - expr .)
    -               reduce using rule 16 (expr -> expr - expr .)
    +               reduce using rule 16 (expr -> expr - expr .)
    $end            reduce using rule 16 (expr -> expr - expr .)
    )               reduce using rule 16 (expr -> expr - expr .)
    MOD             shift and go to state 14
    /               shift and go to state 15
    *               shift and go to state 16


state 29

    (17) expr -> expr + expr .
    (11) expr -> expr . DI expr
    (12) expr -> expr . IG expr
    (13) expr -> expr . MOD expr
    (14) expr -> expr . / expr
    (15) expr -> expr . * expr
    (16) expr -> expr . - expr
    (17) expr -> expr . + expr
    DI              reduce using rule 17 (expr -> expr + expr .)
    IG              reduce using rule 17 (expr -> expr + expr .)
    -               reduce using rule 17 (expr -> expr + expr .)
    +               reduce using rule 17 (expr -> expr + expr .)
    $end            reduce using rule 17 (expr -> expr + expr .)
    )               reduce using rule 17 (expr -> expr + expr .)
    MOD             shift and go to state 14
    /               shift and go to state 15
    *               shift and go to state 16


state 30

    (9) expr -> ( expr ) .
    DI              reduce using rule 9 (expr -> ( expr ) .)
    IG              reduce using rule 9 (expr -> ( expr ) .)
    MOD             reduce using rule 9 (expr -> ( expr ) .)
    /               reduce using rule 9 (expr -> ( expr ) .)
    *               reduce using rule 9 (expr -> ( expr ) .)
    -               reduce using rule 9 (expr -> ( expr ) .)
    +               reduce using rule 9 (expr -> ( expr ) .)
    $end            reduce using rule 9 (expr -> ( expr ) .)
    )               reduce using rule 9 (expr -> ( expr ) .)
